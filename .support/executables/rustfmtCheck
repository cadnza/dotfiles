#!/usr/bin/env bash

# shellcheck disable=SC2028,SC2046,SC2086

# Make sure yq is installed
which yq &> /dev/null || {
	echo "Please install yq" >&2
	exit 1
}

# Make sure rustfmt is installed
which rustfmt &> /dev/null || {
	echo "Please install rustfmt" >&2
	exit 1
}

# Assign argument
f=$1

# Name expected file
wants=.rustfmt.toml

# Make sure argument is supplied
[ -z $f ] && {
	echo "Please supply a file called $wants." >&2
	exit 1
}

# Make sure file is named analysis_options.yaml (rigid, but safe)
[ $(basename $f) = $wants ] || {
	echo "Please supply a file called $wants." >&2
	exit 1
}

# Make sure file exists
[ -f $f ] || {
	echo "$f does not exist." >&2
	exit 1
}

# Open temp file for output
fOutput=$(mktemp)

# Define formats
cModified="38;5;2"
cMissing=2
cDefault=2
cNonexistent="38;5;1"

# Convert default and user configs to JSON
configDefault=$(rustfmt --print-config default | yq -p toml -o json)
configUser=$(cat $f | yq -p toml -o json)

# Get default config keys
keysDefault=$(echo $configDefault | jq keys | jq -r .[])

# Loop through default config keys
echo "$keysDefault" | while read -r keyDefault
do

	# Get default and user values
	valDefault=$(echo $configDefault | jq ".$keyDefault")
	valUser=$(echo $configUser | jq ".$keyDefault")

	# Add default and continue if unspecified
	[ $valUser = null ] && {
		echo "\033[$cMissing""m$keyDefault = $valDefault\033[0m" >> $fOutput
		continue
	}

	# Add modification and continue if modified
	[ $valUser = $valDefault ] || {
		echo "\033[$cModified""m$keyDefault = $valUser\033[0m \033[2m\033[3mDefault: $valDefault\033[0m" >> $fOutput
		continue
	}

	# Add default and continue if unmodified
	[ $valUser = $valDefault ] && {
		echo "\033[$cDefault""m$keyDefault = $valDefault\033[0m" >> $fOutput
		continue
	}

done

# Get user config keys
keysUser=$(echo $configUser | jq keys | jq -r .[])

# Add keys that don't exist in the default spec
echo "$keysUser" | while read -r keyUser
do
	[ $(echo $configDefault | jq ".$keyUser") = null ] && {
		echo "\033[$cNonexistent""m$keyUser = $(
			echo $configUser | jq ".$keyUser"
		)\033[0m \033[2m\033[3mInvalid key\033[0m" >> $fOutput
	}
done

# Show output
final=$(cat $fOutput | sort)
echo -e "$final"

# Remove output file
rm $fOutput

# Exit
exit 0
