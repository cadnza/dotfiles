#!/usr/bin/env bash

# shellcheck disable=SC2046,SC2086

# Make sure rustfmt is installed
which rustfmt &> /dev/null || {
	echo "Please install rustfmt" >&2
	exit 1
}

# Assign argument
f=$1

# Name expected file
wants=.rustfmt.toml

# Make sure argument is supplied
[ -z $f ] && {
	echo "Please supply a file called $wants." >&2
	exit 1
}

# Make sure file is named analysis_options.yaml (rigid, but safe)
[ $(basename $f) = $wants ] || {
	echo "Please supply a file called $wants." >&2
	exit 1
}

# Make sure file exists
[ -f $f ] || {
	echo "$f does not exist." >&2
	exit 1
}

# Define colors
cModified=2
cMissing=1

# Loop through default settings
rustfmt --print-config default | while read -r setting
do

	# Extract key and value
	key=$(echo $setting | sed 's/ .*//g' )
	default=$(echo $setting | sed "s/$key = //g")

	# Check whether key exists in config
	keyExists=$(cat $f | grep -c "^$key")

	# Color missing and break if no user setting
	[ $keyExists = 1 ] || {
		echo  -e "\033[38;5;$cMissing""m$setting\033[0m"
		continue
	}

	# Get user setting, key, and value
	settingUser=$(cat $f | grep "^$key ")
	keyUser=$(echo $settingUser | sed 's/ .*//g' )
	defaultUser=$(echo $settingUser | sed "s/$key = //g")

	# Color modified, annotate, and break if user setting doesn't match default
	[ "$setting" = "$settingUser" ] || {
		echo -e "\033[38;5;$cModified""m$key = $defaultUser\033[0m  \033[2m\033[3mDefault: $default\033[0m"
		continue
	}

	# Show raw setting
	echo $setting

done
